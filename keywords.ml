(**************************************************************************)
(*                                                                        *)
(* OCaml template Copyright (C) 2004-2010                                 *)
(*  Sylvain Conchon, Jean-Christophe Filliatre and Julien Signoles        *)
(* Adaption to .dpt file parsing by Jonathan Kimmitt                      *)
(*  Copyright 2017 University of Cambridge                                *)
(*                                                                        *)
(*  This software is free software; you can redistribute it and/or        *)
(*  modify it under the terms of the GNU Library General Public           *)
(*  License version 2.1, with the special exception on linking            *)
(*  described in file LICENSE.                                            *)
(*                                                                        *)
(*  This software is distributed in the hope that it will be useful,      *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  *)
(*                                                                        *)
(**************************************************************************)

open Program

let keywordlst = [
ABSTRACT,"ABSTRACT";
ACCESS,"ACCESS=";
ACTION,"ACTION=";
ADVANCE,"ADVANCE=";
All,"All";
ALLOCATABLE,"ALLOCATABLE";
ALLOCATE,"ALLOCATE";
Allocating,"Allocating";
Ambiguous,"Ambiguous";
ARITHIF,"ARITHIF";
Array_Spec_,"Array_spec:";
ARTIFICIAL,"ARTIFICIAL";
AS_ASSUMED_SHAPE, "AS_ASSUMED_SHAPE";
AS_ASSUMED_SIZE, "AS_ASSUMED_SIZE";
AS_DEFERRED,"AS_DEFERRED";
AS_EXPLICIT,"AS_EXPLICIT";
ASSIGN,"ASSIGN";
ASSOCIATE, "ASSOCIATE";
ASYNCHRONOUS,"ASYNCHRONOUS=";
Attributes_,"Attributes:";
AUTOMATIC,"AUTOMATIC";
A_Z,"A-Z";
BACKSPACE,"BACKSPACE";
Basisfn,"Basisfn";
Beginning,"Beginning";
BINDLP,"BIND(";
BITCON,"BITCON";
BLANK,"BLANK=";
BLOCK,"BLOCK";
BYTE,"BYTE";
CALL,"CALL";
CASE,"CASE";
C,"C";
C_funptr,"C_funptr";
CHARACTER,"CHARACTER";
C_INTEROP,"C_INTEROP";
CLOSE,"CLOSE";
Code_,"Code:";
COLON,"COLON";
COMMA,"COMMA";
Common_,"Common:";
COMPGOTO,"COMPGOTO";
COMPLEX,"COMPLEX";
Components_,"Components:";
CONTAINS,"CONTAINS";
CONTINUE,"CONTINUE";
CONVERT,"CONVERT=";
C_ptr,"C_ptr";
CURRENCY,"CURRENCY";
CYCLE,"CYCLE";
DATA,"DATA";
DCOMPLEX,"DCOMPLEX";
DEALLOCATE,"DEALLOCATE";
DECIMAL,"DECIMAL=";
DEFERRED,"DEFERRED";
DELIM,"DELIM=";
Di,"Di";
DIMENSION,"DIMENSION";
DIRECT,"DIRECT=";
DO,"DO";
DOUBLE,"DOUBLEPRECISION";
DT_END,"DT_END";
DUMMY,"DUMMY";
DUMMYLP,"DUMMY(";
ELEMENTAL,"ELEMENTAL";
ELSE,"ELSE";
ELSEIF,"ELSEIF";
ENCODING,"ENCODING=";
END,"END";
END_,"END=";
ENDDO,"ENDDO";
ENDFILE,"ENDFILE";
ENDIF,"ENDIF";
EOS,"EOS";
EQ,".eq.";
EQUALS,"EQUALS";
Equivalence_,"Equivalence:";
ERR,"ERR=";
EXIST,"EXIST=";
EXIT,"EXIT";
Exiting,"Exiting";
EXPLICIT_SAVE,"EXPLICIT_SAVE";
EXTERNAL,"EXTERNAL";
EXTERNAL_PROC,"EXTERNAL_PROC";
FALSE,".false.";
FIELD,"FIELD";
FILE,"FILE=";
FLUSH,"FLUSH";
FMT,"FMT=";
FORALL,"FORALL";
FORM,"FORM=";
Formal_Arglist_,"Formal_arglist:";
FORMAT,"FORMAT";
FORMATTED,"FORMATTED=";
From_Namespace_,"From_namespace:";
FULL,"FULL";
FUNCTION,"FUNCTION";
GE,".ge.";
Generic_Interfaces_,"Generic_interfaces:";
GOTO,"GOTO";
GT,".gt.";
Hash_,"hash:";
HEXCON,"HEXCON";
HF,"HF";
Highest,"Highest";
ID,"ID=";
IF,"IF";
IMPLICIT,"IMPLICIT";
IMPLICIT_SAVE,"IMPLICIT_SAVE";
IMPLICIT_TYPE,"IMPLICIT_TYPE";
INCLUDE,"INCLUDE";
INDENT,"INDENT:";
IN_COMMON,"IN_COMMON";
IN,"IN";
IN_NAMELIST,"IN_NAMELIST";
INOUT,"INOUT";
INQUIRE,"INQUIRE";
INTEGER,"INTEGER";
INTERNAL_PROC,"INTERNAL_PROC";
INTRINSIC,"INTRINSIC";
INTRINSIC_PROC,"INTRINSIC_PROC";
IOMSG,"IOMSG=";
IOSTAT,"IOSTAT=";
ISO_C,"ISO_C";
LABEL,"LABEL";
Label_,"Label:";
LE,".le.";
LET,"LET";
LOGICAL,"LOGICAL";
LPAND,"(AND";
LPAR,"LPAR";
LPARG,"(arg";
LPCHARACTER,"(CHARACTER";
LPCOMPLEX,"(COMPLEX";
LPCOMPLEX,"(complex";
LPDERIVED,"(DERIVED";
LPEQV, "(EQV";
LPINTEGER,"(INTEGER";
LPLABEL,"(LABEL";
LPLOGICAL,"(LOGICAL";
LPMODULE,"(MODULE";
LPNAMELIST,"(NAMELIST";
LPNEQV, "(NEQV";
LPNOT,"(NOT";
LPOR, "(OR";
LPPARAMETER,"(PARAMETER";
LPPARENS,"(parens";
LPPROCEDURE,"(PROCEDURE";
LPPROGRAM,"(PROGRAM";
LPREAL,"(REAL";
LPUNKNOWN,"(UNKNOWN";
LPVARIABLE,"(VARIABLE";
LT,".lt.";
MINUS,"MINUS";
MODULE_PROC,"MODULE_PROC";
NAMED,"NAMED=";
NAME_,"NAME=";
Namespace_,"Namespace:";
NE,".ne.";
NEXTREC,"NEXTREC=";
NML,"NML=";
NONE,"NONE";
NULL,"NULL(";
NUMBER,"NUMBER=";
OCTCON,"OCTCON";
OPENED,"OPENED=";
OPEN,"OPEN";
Operator_Bindings_,"Operator_bindings:";
Operator_Interfaces_For,"Operator_interfaces_for";
OPTIONAL, "OPTIONAL";
OUT,"OUT";
PAD,"PAD=";
PAUSE,"PAUSE";
PENDING,"PENDING=";
Perturbation,"Perturbation";
Please,"Please";
POINTER,"POINTER";
POSITION,"POSITION=";
PPC,"PPC";
PRINT,"PRINT";
PRIVATE,"PRIVATE";
Procedure_Name_,"Procedure_name:";
Procedure_Bindings_,"Procedure_bindings:";
PUBLIC,"PUBLIC";
PUNCH,"PUNCH";
PURE,"PURE";
READ,"READ";
READ_,"READ=";
READWRITE,"READWRITE=";
REAL,"REAL";
REC, "REC=";
RECL, "RECL=";
RECURSIVE, "RECURSIVE";
Restarting,"Restarting";
Result_,"Result:";
RESULT, "RESULT";
RETURN,"RETURN";
REWIND,"REWIND";
ROUND,"ROUND=";
RPAR,"RPAR";
SAVE,"SAVE";
SCALE,"SCALE";
SELECT,"SELECT";
SEQUENCE,"SEQUENCE";
SEQUENTIAL,"SEQUENTIAL=";
Setting,"Setting";
Shift,"Shift";
SIGN,"SIGN=";
SIZE,"SIZE=";
SLASHD,"SLASHD";
STATEMENT_PROC,"STATEMENT_PROC";
STAT,"STAT=";
STATIC,"STATIC";
STATUS,"STATUS=";
STOP,"STOP";
SUBROUTINE,"SUBROUTINE";
Symbol_,"Symbol:";
Symmetry,"Symmetry";
Sympairprod,"Sympairprod";
Symtree_,"Symtree:";
TARGET,"TARGET";
THEN,"THEN";
This,"This";
Timer,"Timer";
TO,"TO";
TRANSFER,"TRANSFER";
TRUE,".true.";
Type_Spec_,"Type_spec:";
UNDEFINED,"UNDEFINED";
UNFORMATTED,"UNFORMATTED=";
UNINDENT,"UNINDENT:";
UNIT,"UNIT=";
USE_ASSOCLP,"USE_ASSOC(";
User_operators_,"User_operators:";
Value_,"Value:";
VALUE,"VALUE";
VOLATILE,"VOLATILE";
WHERE,"WHERE";
WHILE,"WHILE";
WRITE,"WRITE";
WRITE_,"WRITE=";
]
